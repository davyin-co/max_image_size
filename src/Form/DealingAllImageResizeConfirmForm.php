<?php


namespace Drupal\max_image_size\Form;


use Drupal\Core\Form\ConfirmFormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

class DealingAllImageResizeConfirmForm extends ConfirmFormBase {

  /**
   * {@inheritdoc}
   */
  public function getFormId() {
    // TODO: Implement getFormId() method.
    return 'dealing_all_image_resize_confirm_form';
  }

  /**
   * {@inheritdoc}
   */
  public function getCancelUrl() {
    // TODO: Implement getCancelUrl() method.
    return Url::fromRoute('max_image_size.list');
  }

  /**
   * {@inheritdoc}
   */
  public function getQuestion() {
    // TODO: Implement getQuestion() method.
    return $this->t('Are you sure you want to dealing all image resizing?');
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    return parent::buildForm($form, $form_state); // TODO: Change the autogenerated stub
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    // TODO: Implement submitForm() method.
    $files = \Drupal::entityTypeManager()->getStorage('file')
      ->loadByProperties(['filemime' => 'image/jpeg']);
    $ops = [];
    foreach ($files as $file) {
      $ops[] = [
        '\Drupal\max_image_size\ResizeBatch::resizeProcessCallback',
        [
          $file,
        ]];
    }
    if ($ops) {
      $batch = [
        'title' => t('Dealing all image resizing'),
        'init_message' => t('Start to dealing all image resizing'),
        'error_message' => t('Dealing all image resizing error'),
        'operations' => $ops,
        'finished' => '\Drupal\max_image_size\ResizeBatch::resizeFinishedCallback',
        'batch_redirect' => Url::fromRoute('max_image_size.list')->toString(),
      ];
      batch_set($batch);
    } else {
      \Drupal::messenger()->addStatus(t('No image to resizing'));
    }
    $form_state->setRedirectUrl(Url::fromRoute('max_image_size.list'));
  }

}
